#!/usr/bin/perl
use strict;
use warnings;
use File::Path qw/mkpath/;
use IO::File;
use Cwd;

unless (@ARGV == 2) {
    &usage;
}

my $prj = $ARGV[1];
my $uprj = uc $prj;
my $cur_dir = cwd;

# 1. 建立目录
print <<EOF;
建立目录结构...
EOF
mkpath( [ map { "$prj/$_" } qw/bin sbin conf etc lib libexec log scratch t tmp / ], 0771 );

# 2. 产生skeleton
print <<EOF;
生成框架文件...
EOF
&gen_skeleton;

# 3. 提示
print <<EOF;
**************************************
1、定制开发, 请编辑:
   $prj/Makefile.PL
   $prj/etc/profile.mak
   $prj/conf/$prj.conf
   $prj/conf/zeta.conf
   $prj/libexec/plugin.pl
   $prj/libexec/main.pl
**************************************
2、测试运行: 
   . $prj/etc/profile.mak
   $prj start; ps -ef | grep Z;
**************************************
3、停止
   $prj stop; sleep 1; ps -ef | grep Z;
**************************************
4、重启 
   restart; sleep 1; ps -ef | grep Z;
**************************************
5、查看日志
   ls -lrt $prj/log/
   tail -f $prj/log/Zhello.log
**************************************
6、初始化github项目(请在github创建repository)
   cd $prj;
   git init
   git add .
   git commit -m "first commit"
   git remote add origin git\@github.com:haryzhou/$prj.git
   git push -u origin master
**************************************
EOF

sub gen_skeleton {
    &gen_profile;   warn "generate 环境变量: $prj/etc/profile.mak\n";
    &gen_zeta;      warn "generate 主配置  : $prj/conf/zeta.conf\n";
    &gen_appconf;   warn "generate 应用配置: $prj/conf/$prj.con\n";
    &gen_plugin;    warn "generate 插件加载: $prj/libexec/plugin.pl\n";
    &gen_main;      warn "generate 主控loop: $prj/libexec/main.pl\n";
    &gen_gitignore; warn "generate git文件 : $prj/.gitignore\n";
    &gen_makefile;  warn "generate Makefile: $prj/Makefile.PL\n";
    &gen_sbin;      warn "generate 启动停止: $prj/sbin/$prj\n";
}

sub gen_profile {
    my $profile =<<EOF;
export ZETA_HOME=\$HOME/opt/zeta
export ${uprj}_HOME=$cur_dir/$prj
export PERL5LIB=\$ZETA_HOME/lib::\$${uprj}_HOME/lib
export PLUGIN_PATH=\$${uprj}_HOME/plugin
export PATH=\$${uprj}_HOME/bin:\$${uprj}_HOME/sbin:\$ZETA_HOME/bin:\$PATH

###################################
# 系统部署参数
###################################
# 数据相关
export DB_NAME=zdb_dev
export DB_USER=db2inst
export DB_PASS=db2inst
export DB_SCHEMA=db2inst
alias dbc='db2 connect to \$DB_NAME user \$DB_USER using \$DB_PASS'

# stomp相关
export STOMP_HOST=127.0.0.1
export STOMP_PORT=61612
export STOMP_DATA=/tmp
export MQ_MAILER=mailer

# mlogd相关
export MLOGD_IP=127.0.0.1
export MLOGD_PORT=9999
export MLOGD_QKEY=9394

###################################
# 命令别名
###################################
alias cdl='cd \$${uprj}_HOME/log';
alias cdd='cd \$${uprj}_HOME/data';
alias cdlb='cd \$${uprj}_HOME/lib/$uprj';
alias cdle='cd \$${uprj}_HOME/libexec';
alias cdb='cd \$${uprj}_HOME/bin';
alias cdsb='cd \$${uprj}_HOME/sbin';
alias cdc='cd \$${uprj}_HOME/conf';
alias cde='cd \$${uprj}_HOME/etc';
alias cdt='cd \$${uprj}_HOME/t';
alias cdh='cd \$${uprj}_HOME';
alias cdtb='cd \$${uprj}_HOME/sql/table';
EOF
    &write_file("$prj/etc/profile.mak", $profile);
}

sub gen_zeta {
    my $zeta =<<EOF;
#!/usr/bin/perl
use strict;
use warnings;

#
# zeta 配置
#
{
   # kernel配置
   kernel => {
       pidfile   => "\$ENV{${uprj}_HOME}/log/zeta.pid",
       mode      => 'logger',
       logurl    => "file://\$ENV{${uprj}_HOME}/log/zeta.log",
       loglevel  => 'DEBUG',
       logmonq   => \$ENV{MLOGD_QKEY},    # 日志监控队列
       channel   => [],
       name      => 'Z$prj',
       plugin    => "\$ENV{${uprj}_HOME}/libexec/plugin.pl",
       main      => "\$ENV{${uprj}_HOME}/libexec/main.pl",
       args      => [ qw// ],
       with      => {
           stomp  => { order => -100, host => \$ENV{STOMP_HOST}, port => \$ENV{STOMP_PORT}, dir => \$ENV{STOMP_DATA} },  # 测试stomp服务器
           mailer => { order => -99, host => \$ENV{STOMP_HOST}, port => \$ENV{STOMP_PORT} },  # 负责邮件发送服务
           mlogd  => { order => -98, host => \$ENV{MLOGD_IP}, port => \$ENV{MLOGD_PORT},},                   # 日志监控HTTPD
           # magent => { order => -97, host => '127.0.0.1', port => 7777, monq => '12345'}, # 应用监控agent
       },
   },

   # 模块配置
   module => {
       Zhello => {
           code      =>  "\$ENV{ZETA_HOME}/libexec/hello.pl",
           para      =>  [],
           reap      =>  1,
           size      =>  1,
           enable    =>  1,   #  0 : 不启用，  1： 启用
       },
   },
};

EOF
    &write_file("$prj/conf/zeta.conf", $zeta);
}


sub gen_appconf {
    my $appconf =<<EOF;
#!/usr/bin/perl
use strict;
use warnings;
use Zeta::Serializer::JSON;
use Carp;
use IO::Socket::INET;
use Zeta::Run;
use DBI;
use Carp;
use Zeta::IPC::MsgQ;
use Net::Stomp;


#
# 返回值
#
my \$cfg = {
};


#
# 获取应用配置
#
helper zconfig => sub { \$cfg };

#
# 连接数据库
#
helper dbh  => sub {
    my \$cfg = zkernel->zconfig();
    my \$dbh = DBI->connect(
        \$ENV{DSN},
        \@ENV{qw/DB_USER DB_PASS/},
        {
            RaiseError       => 1,
            PrintError       => 0,
            AutoCommit       => 0,
            FetchHashKeyName => 'NAME_lc',
            ChopBlanks       => 1,
            InactiveDestroy  => 1,
        }
    );
    unless(\$dbh) {
        zlogger->error("can not connect db[\$ENV{DSN}]");
        exit 0;
    }

    # 设置默认schema
    \$dbh->do("set current schema \$ENV{DB_SCHEMA}")
        or confess "can not set current schema \$ENV{DB_SCHEMA}";
    return \$dbh;
};

#
# 连接stomp
#
helper zstomp => sub {
    my \$cfg = shift->zconfig();
    # 连接stomp
    my \$stp = Net::Stomp->new({
        hostname => \$ENV{STOMP_HOST},
        port     => \$ENV{STOMP_PORT},
    }) or confess <<STOMP;
Net::Stomp failed with 
    { 
        hostname => \$ENV{STOMP_HOST},
        port     => \$ENV{STOMP_PORT},
}
STOMP
    \$stp->connect({ login => 'hello', passcode => 'there' });
    return \$stp;
};

#
# 子进程需要的通用初始化
#
helper zsetup => sub {
};


EOF
    &write_file("$prj/conf/$prj.conf", $appconf);
}

sub gen_plugin {
    my $plugin =<<EOF;
#!/usr/bin/perl
use strict;
use warnings;
use Carp;
use Zeta::Run;
use DBI;

#
# 加载集中配置文件
#
my \$cfg  = do "\$ENV{${uprj}_HOME}/conf/$prj.conf";
confess "[\$\@]" if \$\@;

1;
EOF
    &write_file("$prj/libexec/plugin.pl", $plugin);
}

sub gen_main {
    my $main =<<EOF;
#!/usr/bin/perl
use strict;
use warnings;
use Zeta::Run;
use POE;

use constant {
    DEBUG => \$ENV{${uprj}_DEBUG} || 0,
};

BEGIN {
    require Data::Dump if DEBUG;
}

sub { 
    while(1) { 
        pause(); 
    } 
};

__END__
EOF
    &write_file("$prj/libexec/main.pl", $main);
}

sub gen_gitignore {
    my $gitignore =<<EOF;
*.log
*.swp
*.tgz
*.tar
*.tar.gz
*.pid
/blib
/Makefile
/MYMETA.*
/pm_to_blib
/tmp
*.komodoproject
EOF
    &write_file("$prj/.gitignore", $gitignore);
}


sub gen_makefile {
    my $makefile =<<EOF;
use ExtUtils::MakeMaker;

my \@exec_files;
push \@exec_files, 'bin/' . \$_ for qw/binary files add here/;

WriteMakefile(
    NAME      => '$prj',
    AUTHOR    => 'haryzhou <zcman2005\@gmail.com>',
    ABSTRACT  => '---------------add here---------------',
    LICENSE   => 'artistic_2',
    VERSION_FROM => 'lib/-----------add-here-------.pm',
    META_MERGE => {
        requires => { perl => '5.10' },
        resources => {
            homepage    => 'http://mojolicio.us',
            license     => 'http://www.opensource.org/licenses/artistic-license-2.0',
            MailingList => 'http://groups.google.com/group/$prj',
            repository  => 'http://github.com/haryzhou/$prj',
            bugtracker  => 'http://github.com/haryzhou/$prj/issues'
        }
    },

    PREREQ_PM => {
        'Data::Dump'        => 1.21,
        'POE'               => 1.354,
        'POE::Filter::JSON' => 0.04,
    },

    EXE_FILES => [ \@exec_files ],
    test      => {
        TESTS => 't/*.t t/*/*.t',
    },
);

EOF
    &write_file("$prj/Makefile.PL", $makefile);
}

sub gen_sbin {
    my $sbin =<<EOF;
#!/bin/bash

usage () {
    echo "$prj [start|stop]";
    exit 0;
}

cd \$${uprj}_HOME/log;

if [[ \$# != 1 ]]; then
    usage;
fi

if [ "x\$1" = 'xstop' ]; then
    kill `cat \$${uprj}_HOME/log/zeta.pid`;
elif [ "x\$1" = 'xstart' ]; then
    zeta -f \$${uprj}_HOME/conf/zeta.conf;
else
    usage;
fi
EOF
    &write_file("$prj/sbin/$prj", $sbin);
    chmod 0755, "$prj/sbin/$prj";
}




##############################################
##############################################

sub write_file {
    my $fname = shift;
    IO::File->new("> $fname")->print(+shift);
}

sub usage {
    die <<EOF;
usage: 
    1. zgen app myapp
    2. zgen lite_app myapp
EOF
}

