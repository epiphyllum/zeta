#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long qw/GetOptionsFromArray/;
use POSIX qw/pause/;
use Carp;
use Zeta::Run;
use Data::Dump;

#
#
#  debug测试 -- 环境变量ZETA_DEBUG
#
#  命令行参数处理
my $cfg_file;
my $rtn = GetOptionsFromArray( 
    \@{[@ARGV]}, 
    "file|f=s" => \$cfg_file,
);
unless($rtn){
    &usage;
    exit 0;
}

unless( -f $cfg_file) {
    warn "file $cfg_file does not exists";
    &usage;
    exit 0;
}

# 解析zeta配置文件 
my $zcfg = do $cfg_file or &usage and confess "can not do file $cfg_file";
warn "zeta.conf:\n" if $ENV{ZETA_DEBUG};
Data::Dump->dump($zcfg) if $ENV{ZETA_DEBUG};

# [kernel] section 配置文件
# pidfile     => "$ENV{ZERO_HOME}/log/zeta.pid",
# mode        => 'logger',
# logurl      => "file://$ENV{ZERO_HOME}/log/zeta.log",
# loglevel    => 'DEBUG',
# logmonq     => 9394,
# channel     => [qw//],
# name        => 'Zero',
# plugin      => "$ENV{ZERO_HOME}/libexec/plugin.pl",
# main        => "$ENV{ZERO_HOME}/libexec/main.pl",
# args        => [ qw// ],
# with        => {
#     # 日志监控-HTTPD
#     mlogd => {
#         host => '127.0.0.1',
#         port => '9999',
#         size => 10,
#     },
#     # 监控节点进程
#     magent => {
#         host => '192.168.1.10',
#         port => 100,
#         monq => 9494,
#     },
#     # 消息队列服务器模拟
#     stomp => {
#         host => '127.0.0.1',
#         port => '7777'
#         dir  => '/tmp',
#     },
# },
#
my $kcfg = delete $zcfg->{kernel};  # kernel配置段

# 检查args
my $args = delete $kcfg->{args};
unless($args) {
    $args = [];
}
unless( 'ARRAY' eq ref $args) {
    confess "invalid kernel->args";
}

# main处理
my $main_file = delete $kcfg->{main};
my $main;
unless(defined $main_file) {
   $main = sub {
       while(1) { pause(); };
   }
}
else {
    unless( -f $main_file ) {
        confess "file[$main_file] invalid"; 
    }
    $main = do $main_file;
    if ($@) { 
        confess "can not do file[$main_file] error[$@]";
    }
}

# 检查channel
$kcfg->{channel} ||= [];
unless( 'ARRAY' eq ref $kcfg->{channel}) {
    confess "invalid kernel->channel";
}

#
# 模块列表 = 配置模块 + with预定义模块
#
my $mcfg = delete $zcfg->{module};
my $with = delete $kcfg->{with};
for (keys %$with) {
    my $name = 'Z' . $_;
    my $order = delete $with->{$_}{order};
    $mcfg->{$name} = {
        code   => "$ENV{ZETA_HOME}/libexec/$_.pl",
        para   => [ %{$with->{$_}} ],
        size   => 1,
        reap   => 1,
        enable => 1,
        order  => $order,
    },
}

#
# 模块参数配置 
# para    => [ qw/A B C file.conf/ ],
# reader  => 'II',
# mreader => [ qw/X Y Z/ ],
# mwriter => [ qw/T U W/ ],
# size    => 2,
# code    => "${apphome}/code.pl",
# exec    => "${apphome}/exec.pl"
# plugin  => { db => [], xx => [] }
# order   => 1,
# 
#
for my $mname (keys %$mcfg) {
    my $m = $mcfg->{$mname};

    my $enable = delete $m->{enable};
    delete $mcfg->{$mname} and next unless $enable;

    $m->{para}    ||= [];
    $m->{mwriter} ||= [];
    $m->{mreader} ||= [];
    $m->{size}    ||= 1; 
    $m->{order}   ||= 0;   # 启动顺序

    if ($m->{code} && $m->{exec}) {
        confess "[$mname] code and exec are mutual execlusive";
    }

    if ($m->{code})  {
        my $cref = do $m->{code};
        if ($@) {
            confess "can not do file[$m->{code}] error[$@]";
        }
        confess "[$mname] code for $mname is not cref" unless 'CODE' eq ref $cref;
        $m->{code} = $cref;
    }
    else {
       unless( $m->{exec} ) {
          confess "[$mname] exec and code both don't exist";
       }
       unless( -f $m->{exec} ) {
           confess "[$mname] file $m->{exec} does not exist";
       } 
    }
}

# 插件
my $pcfg = delete $kcfg->{plugin};


# 启动 kernel
zkernel->launch($kcfg);

# 加载插件
if ( $pcfg ) {
    if ( -f $pcfg) {
       do $pcfg or confess "can not do file[$pcfg] error[$@]";
    }
    else {
       confess "plugin file[$pcfg] does not exists";
    }
}

# 运行
zkernel->run({
    main   => $main,
    args   => $args,
    module => $mcfg
});


sub usage {
    my $usage =<<EOF;
    zeta -f[--file] zeta.conf
EOF
    warn $usage;
}



__END__

